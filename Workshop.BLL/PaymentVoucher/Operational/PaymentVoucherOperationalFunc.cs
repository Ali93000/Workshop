using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Workshop.DAL.Mapping.Request;
using Workshop.DAL.Repository.UnitOfWork;
using Workshop.Entities.ApiModels.PaymentVoucher.Request;
using Workshop.Entities.DTO.User;

namespace Workshop.BLL.PaymentVoucher.Operational
{
    public class PaymentVoucherOperationalFunc : IPaymentVoucherOperationalFunc
    {
        private readonly IPaymentVoucherRequest _paymentVoucherRequest;
        private readonly IUnitOfWork _unitOfWork;
        public PaymentVoucherOperationalFunc(IPaymentVoucherRequest paymentVoucherRequest, IUnitOfWork unitOfWork)
        {
            this._paymentVoucherRequest = paymentVoucherRequest;
            this._unitOfWork = unitOfWork;
        }
        public int CreatPaymentVoucher(PaymentVoucherReq paymentVoucherReq, UserDTO userInfo)
        {
            /// map fron Payment Reaquest To W_T_PaymentVoucher
            var paymentMap = _paymentVoucherRequest.MapFromPaymentReqToDb(paymentVoucherReq);
            //// insert to db ///
            _unitOfWork.paymentVoucherReopsitry.Add(paymentMap);
            // Get Max autogenerated TrCode
            int lastCode = Convert.ToInt32(_unitOfWork.paymentVoucherReopsitry.GetLastCode(userInfo));
            paymentMap.TrCode = (lastCode + 1);
            // Set User Info
            paymentMap.TrDate = DateTime.Now.Date;
            paymentMap.CompanyCode = userInfo.CompCode;
            paymentMap.BranchCode = userInfo.BraCode;
            paymentMap.CreateAt = DateTime.Now.ToString();
            paymentMap.CreateBy = userInfo.Username;
            _unitOfWork.SaveChanges();
            return paymentMap.Id;
        }


        public void UpdatePaymentVoucher(PaymentVoucherReq paymentVoucherReq, UserDTO userInfo)
        {
            /// map fron Payment Reaquest To W_T_PaymentVoucher
            var paymentMap = _paymentVoucherRequest.MapFromPaymentReqToDb(paymentVoucherReq);
            //// Edit to db ///
            _unitOfWork.paymentVoucherReopsitry.Update(paymentMap);
            // Set User Info
            paymentMap.TrDate = DateTime.Now.Date;
            paymentMap.CompanyCode = userInfo.CompCode;
            paymentMap.BranchCode = userInfo.BraCode;
            paymentMap.UpdateAt = DateTime.Now.ToString();
            paymentMap.UpdateBy = userInfo.Username;
            _unitOfWork.SaveChanges();
        }

        void IPaymentVoucherOperationalFunc.DeletePaymentVoucher(int id)
        {
            //// Delete to db ///
            // var dd = _unitOfWork.paymentVoucherReopsitry.GetById(id);
            _unitOfWork.paymentVoucherReopsitry.RemoveById(id);
            _unitOfWork.SaveChanges();
        }
    }
}
